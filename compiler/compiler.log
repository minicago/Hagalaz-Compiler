1
Starting the compiler?
CompUnitNode
FuncDefNode: type=291, id=main
Body:
BlockGroupNode
DeclNode: isConst=0, type=291, id=a
Array size:
VectorNode
ConstIntNode: val=2
Initial value:
VectorNode
ConstIntNode: val=1
ConstIntNode: val=2
ReturnNode
LvalNode: id=a
VectorNode
ConstIntNode: val=0
Visiting CompUnitNode
Visiting FuncDefNode
Function definition: main
Visiting BlockGroupNode
Visiting DeclNode
Visiting vectorNode
Constructing type: int
Visiting ConstIntNode
Finished visiting ConstIntNode
Element type: const int
Constructing type: [2]int
Finished visiting vectorNode
type [2]int
Visiting vectorNode
Visiting ConstIntNode
Finished visiting ConstIntNode
Element type: const int
Visiting ConstIntNode
Finished visiting ConstIntNode
Element type: const int
Finished visiting vectorNode
Finished visiting DeclNode
Visiting ReturnNode
0
Visiting LvalNode
Visiting ConstIntNode
Finished visiting ConstIntNode
Array is constant.
[2]int
get_index
index: 0
type: 0
int
0 0
int
Finished visiting LvalNode
Matching types: int and int
Finished visiting ReturnNode
Finished visiting BlockGroupNode
Finished visiting FuncDefNode
Finished visiting CompUnitNode
IRBuilder toString
malloc 8 -> $1
add $1, 0 -> $2
store 1 -> $2
add $1, 4 -> $3
store 2 -> $3
add 0, $1 -> $5
load $5 -> $6
return $6
()
main
()
malloc 8 -> $1
add $1, 0 -> $2
store 1 -> $2
add $1, 4 -> $3
store 2 -> $3
add 0, $1 -> $5
load $5 -> $6
return $6


Building LIR
Finished building global variables
Building2: add $1, 0 -> $2
Building2: store 1 -> $2
Building2: add $1, 4 -> $3
Building2: store 2 -> $3
Building2: add 0, $1 -> $5
Building2: load $5 -> $6
Building2: return $6
Finished building LIR
